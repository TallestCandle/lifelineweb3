'use client';

import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { PiUser, UserData, AuthState, PiAuthError } from '@/types/auth';
import { initPiSDK } from '@/lib/pi-sdk';

interface AuthContextType extends Omit<AuthState, 'userData'> {
  userData: UserData | null;
  signIn: () => Promise<void>;
  signOut: () => Promise<void>;
  isAuthenticated: boolean;
  sdkLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const router = useRouter();
  const [state, setState] = useState<AuthState>({
    user: null,
    userData: null,
    loading: true,
    error: null,
  });
  const [sdkLoading, setSdkLoading] = useState(true);

  // Initialize Pi SDK
  useEffect(() => {
    const init = async () => {
      try {
        await initPiSDK(process.env.NODE_ENV === 'development');
        setSdkLoading(false);
      } catch (error: any) {
        console.error('Failed to initialize Pi SDK:', error);
        setState(prev => ({
          ...prev,
          error: error instanceof PiAuthError ? error : new PiAuthError('Failed to initialize Pi SDK', 'SDK_INIT_FAILED'),
        }));
        setSdkLoading(false);
      }
    };

    init();
  }, []);

  // Check for existing session
  useEffect(() => {
    const checkSession = async () => {
      try {
        const savedUser = localStorage.getItem('pi_user');
        const savedUserData = localStorage.getItem('pi_user_data');
        
        if (savedUser && savedUserData) {
          setState({
            user: JSON.parse(savedUser),
            userData: JSON.parse(savedUserData),
            loading: false,
            error: null,
          });
        } else {
          setState(prev => ({ ...prev, loading: false }));
        }
      } catch (error) {
        console.error('Error checking session:', error);
        setState(prev => ({ 
          ...prev, 
          loading: false,
          error: new PiAuthError('Failed to restore session', 'SESSION_RESTORE_FAILED')
        }));
      }
    };

    if (!sdkLoading) {
      checkSession();
    }
  }, [sdkLoading]);

  const signIn = useCallback(async () => {
    if (sdkLoading) {
      throw new PiAuthError('Pi SDK is still loading. Please wait a moment and try again.', 'SDK_LOADING');
    }

    if (typeof window.Pi === 'undefined') {
      throw new PiAuthError('Pi SDK not available. Please ensure you are using the Pi Browser.', 'SDK_NOT_AVAILABLE');
    }

    setState(prev => ({ ...prev, loading: true, error: null }));

    try {
      // Only request username scope for authentication
      const piUser = await window.Pi.authenticate(['username']);

      if (!piUser || typeof piUser !== 'object') {
        throw new PiAuthError('Invalid response from Pi Network', 'INVALID_RESPONSE');
      }

      if (!piUser.uid || typeof piUser.uid !== 'string' || piUser.uid.trim() === '') {
        throw new PiAuthError('Missing or invalid user ID from Pi Network. Please try again.', 'INVALID_USER_ID');
      }

      if (!piUser.username || typeof piUser.username !== 'string' || piUser.username.trim() === '') {
        throw new PiAuthError('Missing or invalid username from Pi Network. Please try again.', 'INVALID_USERNAME');
      }

      // Create user data
      const userData: UserData = {
        uid: piUser.uid,
        username: piUser.username,
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      // Save to local storage
      localStorage.setItem('pi_user', JSON.stringify(piUser));
      localStorage.setItem('pi_user_data', JSON.stringify(userData));

      setState({
        user: piUser,
        userData,
        loading: false,
        error: null,
      });

      router.push('/dashboard');
    } catch (error: any) {
      console.error('Sign-in error:', error);
      
      setState(prev => ({
        ...prev,
        user: null,
        userData: null,
        loading: false,
        error: error instanceof PiAuthError ? error : new PiAuthError('Sign-in failed. Please try again.', 'SIGN_IN_FAILED'),
      }));

      if (error instanceof PiAuthError) {
        alert(error.message);
      } else {
        alert('Failed to sign in. Please make sure you are using the Pi Browser and try again.');
      }

      throw error;
    }
  }, [sdkLoading, router]);

  const signOut = useCallback(async () => {
    setState(prev => ({ ...prev, loading: true }));

    try {
      // Clear stored data
      localStorage.removeItem('pi_user');
      localStorage.removeItem('pi_user_data');

      // Reset state
      setState({
        user: null,
        userData: null,
        loading: false,
        error: null,
      });

      router.push('/');
    } catch (error: any) {
      console.error('Sign-out error:', error);
      setState(prev => ({
        ...prev,
        loading: false,
        error: new PiAuthError('Failed to sign out. Please try again.', 'SIGN_OUT_FAILED'),
      }));

      throw error;
    }
  }, [router]);

  const value = {
    ...state,
    sdkLoading,
    signIn,
    signOut,
    isAuthenticated: !!state.user,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export default AuthProvider;
